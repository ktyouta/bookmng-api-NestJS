■TypeORMマイグレーション手順

①src/entities/TestConnection.tsを作成
TestConnection.tsの内容
import { Entity, PrimaryGeneratedColumn, Column, BaseEntity } from 'typeorm';

@Entity()
export class TestConnection extends BaseEntity {
    @PrimaryGeneratedColumn()
    id!: string;
}


②EntitiesList.tsを作成してENTITIES_LISTにエンティティクラスを追加する
// テーブルリスト
export const ENTITIES_LIST = [
    // テスト接続用
    TestConnection,
];

※以降テーブル追加の際は①、②を実施する


③typeorm.config.tsを作成
dotenv.config();

export const TYPEORM_CONFIG: DataSourceOptions = {
    type: 'postgres',
    host: ENV.DATABASE.HOST,
    port: ENV.DATABASE.PORT,
    username: ENV.DATABASE.USERNAME,
    password: process.env.DATABASE_PASSWORD,
    database: ENV.DATABASE.NAME,
    schema: ENV.DATABASE.SCHEMA,
    entities: ENTITIES_LIST,
    migrations: ['src/migrations/*.ts'],
    synchronize: false,
    //logging: true,
};


④app.module.tsに以下の内容を追記

  imports: [
    // DB設定
    TypeOrmModule.forRoot(TYPEORM_CONFIG),
  ]


⑤src直下にdatasource.tsを作成

dotenv.config();

export const AppDataSource = new DataSource(TYPEORM_CONFIG);


⑥package.jsonのscriptsに以下を追記
"typeorm": "ts-node -r tsconfig-paths/register ./node_modules/typeorm/cli.js"


⑦以下のコマンドでマイグレーションを作成する
コマンド：npm run typeorm migration:generate -- --dataSource src/datasource.ts --pretty migrations/コメント
※コマンド実行後にマイグレーションファイルが作成される


⑧以下のコマンドでマイグレーションを実行する
コマンド：npm run typeorm migration:run -- --dataSource src/datasource.ts 


■参考サイト
https://developer.mamezou-tech.com/blogs/2023/02/22/typeorm-migration-intro/