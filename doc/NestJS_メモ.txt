■NestJS_メモ


①依存性注入(DI)

・newされるタイミング
アプリ起動時（Nestアプリケーションがブートストラップされるとき）に DIコンテナ（正確にはInjector）が new して管理

フロントからリクエストが来たタイミングではなくて、
アプリを立ち上げたとき（main.tsでapp.listen()するとき）に、
必要なプロバイダー（ServiceとかRepositoryとか）をまとめてnewして、インスタンスを持つ



・注入されるタイミング
クラス（ControllerやService）が初めて使われるときに、DIコンテナから取り出して渡される

注入フロー
Controllerをルーティング登録する

Controllerの中に依存するServiceが必要

DIコンテナにそのServiceが登録されてるから取り出して、コンストラクタ引数に渡してnewする


コンストラクタ呼び出し時点で注入される

自分でnewせず、Nestがnewして注入する



②ファイル命名規則

xxx.repository.ts	カスタムリポジトリ処理（DB操作のラップ）
xxx.entity.ts	TypeORMやPrismaなどで使うDBエンティティ定義
xxx.dto.ts	リクエスト/レスポンスのデータ構造定義
xxx.guard.ts	アクセス制御（認可）用
xxx.interceptor.ts	レスポンス加工/ログ記録用
xxx.pipe.ts	バリデーション/変換用
xxx.filter.ts	独自の例外ハンドリング



③実行順序

1. Middleware（Expressベース。app.use() で登録）

2. Guard（@UseGuards。ルートにアクセスして良いかを判定）

3. Interceptor（前処理）（@UseInterceptors。リクエスト加工・ロギングなど）

4. Pipe（@UsePipes。DTO変換やバリデーション）

5. Controller（@Get/@Postなど）

6. Interceptor（後処理）（レスポンスの加工など）

7. Exception Filter（@UseFilters。例外が発生したときのみ）




































